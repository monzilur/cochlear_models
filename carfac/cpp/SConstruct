# Copyright 2013 The CARFAC Authors. All Rights Reserved.
# Author: Ron Weiss <ronw@google.com>
#
# This file is part of an implementation of Lyon's cochlear model:
# "Cascade of Asymmetric Resonators with Fast-Acting Compression"
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""@package SConstruct
SConstruct file for the CARFAC C++ Library.

To install dependencies on Ubuntu, run:

  sudo apt-get install libeigen3-dev scons \
    cmake libgtest-dev  # For testing.
  export EIGEN_PATH=/usr/include/eigen3
  export GTEST_SOURCE=/usr/src/gtest

To build all C++ libraries, run:
  scons

To run unit tests, run:
  scons test

To clean up binaries, run:
  scons --clean

To use emscripten to compile the library to asm.js, run:
  scons carfac.js

To install emscripten and its dependencies on Ubuntu, follow the
instructions on
https://github.com/kripken/emscripten/wiki/Getting-Started-on-Ubuntu-12.10
(Note that you can download the prebuilt LLVM binaries from
http://llvm.org/releases/download.html instead of building it from
source.)
"""

import commands
import os

env = Environment(CPPPATH = [os.environ['EIGEN_PATH'],
                             os.environ['GTEST_SOURCE'] + '/include'])
GCC_VERSION = commands.getoutput(env['CXX'] + ' -dumpversion')
if GCC_VERSION.startswith('4.6'):
  # The override keyword is not supported in GCC 4.6, so we define it away.
  env.MergeFlags(['-std=c++0x -Doverride='])
else:
  env.MergeFlags(['-std=c++11'])

carfac_sources = [
    'agc.h',
    'binaural_sai.cc',
    'car.h',
    'carfac.cc',
    'carfac_util.h',
    'common.h',
    'ear.cc',
    'ihc.h',
    'sai.cc'
    ]
carfac = env.Library(target = 'carfac', source = carfac_sources)
Default(carfac)

env.Command('tmp/libgtest.a', [],
            [
                Delete('tmp'),
                Copy('tmp', os.environ['GTEST_SOURCE']),
                'cd tmp && cmake . && make',
            ])

test_targets = [
    'binaural_sai_test',
    'carfac_test',
    'sai_test',
    ]
test_programs = [env.Program(target = test_target,
                             source = ['%s.cc' % test_target],
                             LIBS = ['carfac', 'gtest', 'gtest_main', 'pthread'],
                             LIBPATH = ['.', 'tmp'])
                 for test_target in test_targets]
run_all_tests = env.Command('test',
                            test_programs,
                            ['./%s' % x for x in test_targets])

emscripten_sources = ['carfac.cc', 'ear.cc', 'sai.cc', 'emscripten_bindings.cc']
emscripten_env = Environment(
  ENV = dict(PATH=os.path.pathsep.join([env['ENV']['PATH'],
                                        os.environ['EMSCRIPTEN_PATH']])))
emscripten_env.Command(
  'carfac.js', emscripten_sources,
  [
    'em++ -O2 --bind {sources} -I {EIGEN_PATH} -std=c++11 -o carfac.js'.format(
      EIGEN_PATH = os.environ['EIGEN_PATH'],
      sources = ' '.join(emscripten_sources))
  ])
